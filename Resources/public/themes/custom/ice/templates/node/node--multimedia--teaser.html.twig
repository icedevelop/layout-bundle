{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{# Multimedia type #}
{% set multimedia_type = content.field_multimedia_type.0['#markup'] | lower %}

{# Section settings #}
{% set section_classes = [
'u-nbfc',
'u-borderShadow-xxs',
'u-color-grey-30',
'u-background-white',
multimedia_type,
] %}

{# Title settings #}
{% set title_classes = [
'u-text-h4',
'u-margin-r-bottom'
] %}

{# Icon settings #}
{% set icon_attributes = create_attribute() %}
{% set icon_classes = [
'Icon',
'u-color-white',
'u-floatRight',
'u-text-r-l'
] %}
{% set icon_type = 'Icon-camera' %}
{% if ((multimedia_type ) == 'videogallery') %}
  {% set icon_type = 'Icon-video' %}
{% endif %}

<section{{ attributes.addClass(section_classes) }}>

  <figure class="u-background-60 u-padding-all-s {{ multimedia_type }}">

    {# Multimedia preview #}
    <a href="{{ url }}" class="u-borderFocus u-block">

      {% if ((multimedia_type ) == 'videogallery') %}

        {# Videogallery #}
        {{ content.field_youtube_video }}

      {% else %}

        {# Photogallery #}
        {% if(content_photogallery_preview.single_image) %}

          {# Single image #}
          <img src="{{ content_photogallery_preview.images.0.data.path }}"
               alt="{{ content_photogallery_preview.images.0.data.alt }}"
               title="{{ content_photogallery_preview.images.0.data.title }}"
               class="u-sizeFull"/>

        {% else %}

          {# Multiple images #}
          <div class="Grid Grid--withGutter">

            {# First image large #}
            <div class="Grid-cell u-size9of12 photogallery wrapper first-image">
              <img src="{{ content_photogallery_preview.images.0.data.path }}"
                   alt="{{ content_photogallery_preview.images.0.data.alt }}"
                   title="{{ content_photogallery_preview.images.0.data.title }}"
                   class="u-sizeFull"/>
            </div>
            <div class="Grid-cell u-size3of12 photogallery wrapper other-images">
              {% for image in content_photogallery_preview.images %}
                {% if (loop.first == false) %}
                  <img src="{{ file_url(image.data.path) }}"
                       alt="{{ image.data.alt }}"
                       title="{{ image.data.title }}"
                       class="u-sizeFull"/>
                {% endif %}
              {% endfor %}
            </div>
          </div>
        {% endif %}

      {% endif %}
    </a>

    <figcaption class="u-padding-r-top">

      {# Multimedia type icon #}
      <span{{ icon_attributes
      .addClass(icon_classes)
      .addClass(icon_type) }}
              aria-hidden="true">
      </span>

      {# Multimedia type #}
      <p class="u-color-teal-50 u-text-r-xxs u-textWeight-700 u-padding-bottom-xs">
        {{ content.field_multimedia_type.0 }}
      </p>

      {# Data #}
      <p class="u-color-white u-text-r-xxs">
        {{ content.field_data }}
      </p>
    </figcaption>
  </figure>

  <div class="u-text-r-xs u-padding-r-all u-layout-prose">
    <h3{{ title_attributes.addClass(title_classes) }}>
      <a class="u-textClean u-color-black u-textWeight-400 u-text-r-m"
         href="{{ url }}"
         rel="bookmark">
        {{ label }}
      </a>
    </h3>
  </div>

</section>